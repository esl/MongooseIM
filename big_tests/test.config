%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% coding: utf-8

%% DEPRECATED!
%% TODO: This entire block assumes there's just one node in the tests which is false.
%%       Stop using it as soon as possible (i.e. convert suites to use `hosts` defined below).
%%       See s2s_SUITE for example on using `hosts` to RPC into nodes (uses CT "require").
%% the Erlang node name of tested ejabberd/MongooseIM
{ejabberd_node, 'mongooseim@localhost'}.
{ejabberd_cookie, ejabberd}.
{ejabberd_string_format, bin}.

%% TODO: in every new use case this should be used instead
%%       of ejabberd_node, ejabberd2_node, ejabberd_domain,
%%       ejabberd_secondary_domain, ...
%% TODO: introduce host option verification ASAP,
%%       so that we rein the "bag of things" approach
{hosts, [{mim,  [{node, mongooseim@localhost},
                 {domain, <<"localhost">>},
                 {vars, "mim1.vars.config"},
                 {cluster, mim},
                 {secondary_domain, <<"localhost.bis">>},
                 {reloaded_domain, <<"sogndal">>},
                 {metrics_rest_port, 5288},
                 {metrics_rest_port2, 5289}]},
         {mim2, [{node, ejabberd2@localhost},
                 {domain, <<"localhost">>},
                 {vars, "mim2.vars.config"},
                 {cluster, mim}]},
         {mim3, [{node, mongooseim3@localhost},
                 {domain, <<"localhost">>},
                 {vars, "mim3.vars.config"},
                 {cluster, mim}]},
         %% used to test s2s features
         {fed,  [{node, fed1@localhost},
                 {domain, <<"fed1">>},
                 {vars, "fed1.vars.config"},
                 {cluster, fed}]},
         %% used to test global distribution features
         {reg,  [{node, reg1@localhost},
                 {domain, <<"reg1">>},
                 {vars, "reg1.vars.config"},
                 {cluster, reg}]}
        ]}.

%% Use RPC and ejabberd_auth API for creating/deleting test users
{escalus_user_db, {module, escalus_ejabberd}}.
{escalus_xmpp_server, escalus_mongooseim}.

%% Use modules that implement the escalus_user_db behaviour:
%% {escalus_user_db, {module, escalus_ejabberd}}. % RPC-based registration
%% {escalus_user_db, {module, YourModule}}.
%% {escalus_user_db, {module, YourModule, ListOfOptions}}.

%% Log all stanzas sent and received (consumed) in the test cases
{stanza_log, true}.

{escalus_users, [
    {alice, [
        {username, <<"alicE">>},
        {server, <<"localhost">>},
        {password, <<"matygrysa">>}]},
    {alice_bis, [
        {username, <<"alicE">>},
        {server, <<"localhost.bis">>},
        {host, <<"localhost">>},
        {password, <<"matygrysa">>}]},
    {bob, [
        {username, <<"bOb">>},
        {server, <<"localhost">>},
        {password, <<"makrolika">>}]},
    {carol, [
        {username, <<"carol">>},
        {server, <<"localhost">>},
        {password, <<"jinglebells">>},
        {transport, escalus_bosh},
        {path, <<"/http-bind">>},
        {port, 5280}]},
    {carol_s, [
        {username, <<"carol_s">>},
        {server, <<"localhost">>},
        {password, <<"jinglebells_s">>},
        {transport, escalus_bosh},
        {ssl, true},
        {path, <<"/http-bind">>},
        {port, 5285}]},
    {kate, [
        {username, <<"kate">>},
        {server, <<"localhost">>},
        {password, <<"makrowe;p">>}]},
    {mike, [
        {username, <<"mike">>},
        {server, <<"localhost">>},
        {password, <<"nicniema">>}]},
    {geralt, [
        {username, <<"geralt">>},
        {server, <<"localhost">>},
        {password, <<"witcher">>},
        {transport, escalus_ws},
        {port, 5280},
        {wspath, <<"/ws-xmpp">>}]},
    {geralt_s, [
        {username, <<"geralt_s">>},
        {server, <<"localhost">>},
        {password, <<"witcher_s">>},
        {transport, escalus_ws},
        {ssl, true},
        {port, 5285},
        {wspath, <<"/ws-xmpp">>}]},
    {hacker, [
        {username, <<"hacker">>},
        {server, <<"localhost">>},
        {password, <<"bringdowntheserver">>},
        {compression, <<"zlib">>},
        {port, 5223}]},
    {admin, [
        {username, <<"admin">>},
        {server, <<"localhost">>},
        {password, <<"bruce_almighty">>}]},
    {secure_joe, [
        {username, <<"secure_joe">>},
        {server, <<"localhost">>},
        {password, <<"break_me">>},
        {compression, <<"zlib">>},
        {starttls, required}]},
    {astrid, [
        {username, <<"astrid">>},
        {server, <<"sogndal">>},
        {host, <<"localhost">>},
        {password, <<"doctor">>}]},
    {alice2, [ %% used in s2s_SUITE
        {username, <<"alice">>},
        {server, <<"fed1">>},
        {host, <<"localhost">>},
        {port, 5242},
        {password, <<"makota2">>}]},
    {bob2, [
        {username, <<"bob">>},
        {server, <<109,105,99,104,97,197,130>>}, %% <<"michaÅ‚"/utf8>>
        {host, <<"localhost">>},
        {port, 5242},
        {password, <<"makota3">>}]},
    {clusterguy, [
        {username, <<"clusterguy">>},
        {server, <<"localhost">>},
        {host, <<"localhost">>},
        {password, <<"distributionftw">>},
        {port, 5232}]},
    {clusterbuddy, [
        {username, <<"clusterbuddy">>},
        {server, <<"localhost">>},
        {host, <<"localhost">>},
        {password, <<"wasssssssup">>},
        {port, 5232}]},
    {eve, [ %% used in mod_global_distrib_SUITE
        {username, <<"eve">>},
        {server, <<"localhost">>},
        {password, <<"password">>},
        {port, 5252}]}
]}.

{escalus_anon_users, [
    {jon, [
        {username, <<"jon">>},
        {server, <<"anonymous.localhost">>},
        {host, <<"localhost">>},
        {auth_method, <<"SASL-ANON">>}]}
                     ]}.

{ejabberd_nodes, [
    internal_mnesia,
    internal_redis,
    odbc_mnesia,
    odbc_redis,
    external_mnesia,
    external_redis,
    ldap_mnesia,
    cassandra_mnesia,
    elasticsearch_mnesia
]}.

{ejabberd_presets, [
    {internal_mnesia,
     %% dbs variable is used by ./tools/test_runner/presets_to_dbs.sh script
     [{dbs, [redis]},
      {sm_backend, "{mnesia, []}"},
      {auth_method, "internal"},
      {mod_offline, "{mod_offline, []},"}]},
    {internal_redis,
     [{dbs, [redis]},
      {sm_backend, "{redis, [{pool_size, 3}, {worker_config, [{host, \"localhost\"}, {port, 6379}]}]}"},
      {auth_method, "internal"},
      {mod_offline, "{mod_offline, []},"}]},
    {pgsql_mnesia,
     [{dbs, [redis, pgsql]},
      {sm_backend, "{mnesia, []}"},
      {auth_method, "odbc"},
      {odbc_pools, "{pool, odbc, default}."},
      {odbc_server, "{odbc_server, {pgsql, \"localhost\", \"ejabberd\", \"ejabberd\", \"mongooseim_secret\",
                                     [{ssl, required}, {ssl_opts, [{verify, verify_peer},
                                                                   {cacertfile, \"priv/ssl/cacert.pem\"},
                                                                   {server_name_indication, disable}]}]}}."},
      {mod_last, "{mod_last, [{backend, odbc}]},"},
      {mod_privacy, "{mod_privacy, [{backend, odbc}]},"},
      {mod_private, "{mod_private, [{backend, odbc}]},"},
      {mod_offline, "{mod_offline, [{backend, odbc}]},"},
      {mod_vcard, "{mod_vcard, [{backend, odbc}, {host, \"vjud.@HOST@\"}]},"},
      {mod_roster, "{mod_roster, [{backend, odbc}]},"}]},
    {odbc_pgsql_mnesia,
     [{dbs, [redis, pgsql]},
      {sm_backend, "{mnesia, []}"},
      {auth_method, "odbc"},
      {odbc_pools, "{pool, odbc, default}."},
      {odbc_server, "{odbc_server, \"DSN=ejabberd-pgsql;UID=ejabberd;PWD=mongooseim_secret\"}."},
      {odbc_server_type, "{odbc_server_type, pgsql}."},
      {mod_last, "{mod_last, [{backend, odbc}]},"},
      {mod_privacy, "{mod_privacy, [{backend, odbc}]},"},
      {mod_private, "{mod_private, [{backend, odbc}]},"},
      {mod_offline, "{mod_offline, [{backend, odbc}]},"},
      {mod_vcard, "{mod_vcard, [{backend, odbc}, {host, \"vjud.@HOST@\"}]},"},
      {mod_roster, "{mod_roster, [{backend, odbc}]},"}]},
    {odbc_mssql_mnesia,
     [{dbs, [redis, mssql]},
      {sm_backend, "{mnesia, []}"},
      {auth_method, "odbc"},
      {odbc_pools, "{pool, odbc, default}."},
      {odbc_server, "{odbc_server, \"DSN=mongoose-mssql;UID=sa;PWD=mongooseim_secret+ESL123\"}."},
      {odbc_server_type, "{odbc_server_type, mssql}."},
      {mod_last, "{mod_last, [{backend, odbc}]},"},
      {mod_privacy, "{mod_privacy, [{backend, odbc}]},"},
      {mod_private, "{mod_private, [{backend, odbc}]},"},
      {mod_offline, "{mod_offline, [{backend, odbc}]},"},
      {mod_vcard, "{mod_vcard, [{backend, odbc}, {host, \"vjud.@HOST@\"}]},"},
      {mod_roster, "{mod_roster, [{backend, odbc}]},"}]},
    {mysql_mnesia,
     [{dbs, [redis, mysql]},
      {sm_backend, "{mnesia, []}"},
      {auth_method, "odbc"},
      {odbc_pools, "{pool, odbc, default}."},
      {odbc_server, "{odbc_server, {mysql, \"localhost\", \"ejabberd\", \"ejabberd\", \"mongooseim_secret\",
                                    [{verify, verify_peer}, {cacertfile, \"priv/ssl/cacert.pem\"}]}}."},
      {mod_last, "{mod_last, [{backend, odbc}]},"},
      {mod_privacy, "{mod_privacy, [{backend, odbc}]},"},
      {mod_private, "{mod_private, [{backend, mysql}]},"},
      {mod_offline, "{mod_offline, [{backend, odbc}]},"},
      {mod_vcard, "{mod_vcard, [{backend, odbc}, {host, \"vjud.@HOST@\"}]},"},
      {mod_roster, "{mod_roster, [{backend, odbc}]},"}]},
    {mysql_redis,
     [{dbs, [redis, mysql]},
      {sm_backend, "{redis, [{pool_size, 3}, {worker_config, [{host, \"localhost\"}, {port, 6379}]}]}"},
      {auth_method, "odbc"},
      {odbc_pools, "{pool, odbc, default}."},
      {odbc_server, "{odbc_server, {mysql, \"localhost\", \"ejabberd\", \"ejabberd\", \"mongooseim_secret\",
                                    [{verify, verify_peer}, {cacertfile, \"priv/ssl/cacert.pem\"}]}}."},
      {mod_last, "{mod_last, [{backend, odbc}]},"},
      {mod_privacy, "{mod_privacy, [{backend, odbc}]},"},
      {mod_private, "{mod_private, [{backend, mysql}]},"},
      {mod_offline, "{mod_offline, [{backend, odbc}]},"},
      {mod_vcard, "{mod_vcard, [{backend, odbc}, {host, \"vjud.@HOST@\"}]},"},
      {mod_roster, "{mod_roster, [{backend, odbc}]},"}]},
    {external_mnesia,
     [{dbs, [redis]},
      {sm_backend, "{mnesia, []}"},
      {auth_method, "external"},
      {ext_auth_script, "{extauth_program, \"priv/sample_external_auth.py\"}"},
      {mod_offline, "{mod_offline, []},"}]},
    {ldap_mnesia,
     [{dbs, [redis, ldap]},
      {sm_backend, "{mnesia, []}"},
      {auth_method, "ldap"},
      {mod_offline, "{mod_offline, []},"},
      {auth_ldap, "{ldap_servers,[\"localhost\"]}.\n"
                  "{ldap_port,3389}.\n"
                  "{ldap_rootdn,\"cn=admin,dc=esl,dc=com\"}.\n"
                  "{ldap_password, \"mongooseim_secret\"}.\n"
                  "{ldap_base, \"ou=Users,dc=esl,dc=com\"}.\n"
                  "{ldap_filter, \"(objectClass=inetOrgPerson)\"}.\n"
      },
      {mod_vcard,"{mod_vcard, [{backend, ldap}, {host, \"vjud.@HOST@\"},\n"
                               "{ldap_filter,\"(objectClass=inetOrgPerson)\"},\n"
                               "{ldap_base, \"ou=Users,dc=esl,dc=com\"}\n"
                               "]},"}
     ]},
    {riak_mnesia,
     [{dbs, [redis, riak]},
      {sm_backend, "{mnesia, []}"},
      {auth_method, "riak"},
      %% Specify a list of ciphers to avoid
      %% "no function clause matching tls_v1:enum_to_oid(28)" error
      %% on Riak's side running with Erlang R16.
      %% https://github.com/basho/riak-erlang-client/issues/232#issuecomment-178612129
      %% We also set ciphers in tools/setup_riak on the server side.
      {riak_server, "{riak_server, [{pool_size, 5}, {address, \"127.0.0.1\"},{port, 8087},
                                    {ssl_opts, [{ciphers, [\"AES256-SHA\", \"DHE-RSA-AES128-SHA256\"]},
                                                {server_name_indication, disable}]},
                                    {credentials, \"ejabberd\", \"mongooseim_secret\"},
                                    {cacertfile, \"priv/ssl/cacert.pem\"}]}."},
      {mod_roster, "{mod_roster, [{backend, riak}]},"},
      {mod_private, "{mod_private, [{backend, riak}]},"},
      {mod_vcard, "{mod_vcard, [{backend, riak}, {host, \"vjud.@HOST@\"}]},"},
      {mod_offline, "{mod_offline, [{backend, riak}]},"},
      {mod_last, "{mod_last, [{backend, riak}]},"},
      {mod_privacy, "{mod_privacy, [{backend, riak}]},"}
     ]},
    {cassandra_mnesia,
     [{dbs, [redis, cassandra]},
      {sm_backend, "{mnesia, []}"},
      {cassandra_servers, "{cassandra_servers, [{default, [{ssl,[{cacertfile, \"priv/ssl/cacert.pem\"},
                                                                 {verify, verify_peer}] }] }] }."},
      {auth_method, "internal"},
      {mod_offline, "{mod_offline, []},"}
     ]},
    {elasticsearch_mnesia,
     [{dbs, [redis, elasticsearch]},
      {sm_backend, "{mnesia, []}"},
      {elasticsearch_server, "{elasticsearch_server, []}."},
      {auth_method, "internal"},
      {mod_offline, "{mod_offline, []},"}
     ]},
    {elasticsearch_and_cassandra_mnesia,
     [{dbs, [redis, elasticsearch, cassandra]},
      {sm_backend, "{mnesia, []}"},
      {elasticsearch_server, "{elasticsearch_server, []}."},
      {cassandra_servers, "{cassandra_servers, [{default, [{ssl,[{cacertfile, \"priv/ssl/cacert.pem\"},
                                                                 {verify, verify_peer}] }] }] }."},
      {auth_method, "internal"},
      {mod_offline, "{mod_offline, []},"}
     ]}
]}.

{timetrap,{seconds,30}}.

%% Log drop stanza in parallel stories in mam_SUITE.
%% Helps with debugging mam test cases.
%{log_parallel_story_stanza_drop, true}.

%% vim: ft=erlang
