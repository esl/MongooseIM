version: 2.1


orbs:
  mim:
    commands:
      install_erlang:
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
          preset:
            type: string
            description: Preset type
            default: internal_mnesia
          db:
            type: string
            description: Preset type
            default: mnesia
          rel_config:
            type: string
            description: Rel config type
            default: with-all
        steps:
        - run:
            name: Install Erlang
            command: |
              wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
              sudo dpkg -i erlang-solutions_1.0_all.deb
              sudo apt-get update
              sudo apt-get install -y esl-erlang=<<parameters.otp>>

      setup_db_and_run_tests:
        parameters:
          preset:
            type: string
            description: which preset to use
          db:
            type: string
            description: which db to use
        steps:
        - run:
            name: Setup database
            command: |
              DB=<<parameters.preset>> tools/travis-setup-db.sh
              DB=<<parameters.preset>> if [ <<parameters.preset>> = ldap_mnesia ]; then sudo tools/travis-setup-ldap.sh; fi
              DB=<<parameters.preset>> if [ <<parameters.preset>> = mysql_redis ]; then sudo tools/travis-setup-rmq.sh; fi
              echo '127.0.0.1 muc.localhost' | sudo tee -a /etc/hosts
        - run:
            name: Run tests
            command: |
              KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p <<parameters.preset>> -s false

    executors:
      erlang_image:
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
        docker:
          - image: circleci/erlang:<<parameters.opt>>

    jobs:
      build:
        parallelism: 1
        machine:
          docker_layer_caching: true
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
          rel_config:
            type: string
            description: Rel config type
            default: with-all

        environment:
          SKIP_RELEASE: 0
          REL_CONFIG: <<parameters.rel_config>>
          SKIP_COMPILE: 0
          SKIP_BUILD_TESTS: 0
          SKIP_COV: 0
        working_directory: ~/app


        steps:
          - checkout
          - install_erlang:
              otp: <<parameters.otp>>
          - restore_cache:
              key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}
          - run:
              name: Get deps
              command: |
                sudo apt install unixodbc-dev
                test 1 = "$SKIP_COV" || sudo apt install python-pip
                test 1 = "$SKIP_RELEASE" || tools/configure $REL_CONFIG
                test 1 = "$SKIP_COMPILE" || ./rebar3 get-deps
          - save_cache:
              key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}
              paths: ~/.cache/rebar3
          - restore_cache:
              key: build-cache-{{ .Branch }}-{{ .Revision }}
          - run:
              name: Compile
              command: |
                test 1 = "$SKIP_COMPILE" || ./rebar3 compile
          - run:
              name: Make certs
              command: |
                test 1 = "$SKIP_COMPILE" || make certs
          - run:
              name: Install
              command: |
                test 1 = "$SKIP_RELEASE" || make devrel
          - save_cache:
              key: build-cache-{{ .Branch }}-{{ .Revision }}
              paths:
                - _build
                - tools
                - priv
                - rel
#          - persist_to_workspace:
#              root: ~/app
#              paths:
#                - _build
#                - tools
#                - priv
#                - rel

#      small_tests:
#        docker:
#        ## See https://circleci.com/docs/2.0/custom-images/
#          - image: circleci/erlang:22
#            environment:
#              MIX_ENV: test
#              PRESET: small_tests
#        working_directory: ~/app
#        steps:
#          - checkout
#          - run:
#              name: Get packages
#              command: |
#                sudo apt install unixodbc-dev
#          - restore_cache:
#              keys:
##                - deps-cache--{{ .Branch }}--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}
#                - deps-cache--{{ .Branch }}-{{ .Revision }}
##          - restore_cache:
##              keys:
##                - build-cache-{{ .Branch }}-{{ .Revision }}
#          - run:
#              name: Run tests
#              command: |
#                KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p small_tests -s true

#      tests:
#        parallelism: 1
#        machine:
#          docker_layer_caching: true
#        parameters:
#          otp:
#            type: string
#            description: Version of the Erlang package to install
#          preset:
#            type: string
#            description: Preset type
#            default: internal_mnesia
#          db:
#            type: string
#            description: Preset type
#            default: mnesia
#
#        environment:
#          MIX_ENV: test
#          SKIP_RELEASE: 0
#          SKIP_COMPILE: 0
#          SKIP_BUILD_TESTS: 0
#          PRESET: <<parameters.preset>>
#          DB: <<parameters.db>>
#          SKIP_COV: 0
#
#        working_directory: ~/app
#        steps:
#          - checkout
#          - install_erlang:
#              otp: <<parameters.otp>>
#          - run:
#              name: Get packages
#              command: |
#                sudo apt install unixodbc-dev
##          - attach_workspace:
##               at: ~/app
#          - restore_cache:
#              keys:
#                - deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}
#          - restore_cache:
#              keys:
#                - build-cache-{{ .Branch }}-{{ .Revision }}
#          - run:
#              name: Build tests
#              command: |
#                test 1 = "$SKIP_BUILD_TESTS" || tools/travis-build-tests.sh
#                test 1 = "$SKIP_COV" || pip install --user codecov
#          - run:
#              name: Setup database
#              command: |
#                tools/travis-setup-db.sh
#                if [ $PRESET = 'ldap_mnesia' ]; then sudo tools/travis-setup-ldap.sh; fi
#                if [ $PRESET = 'mysql_redis' ]; then sudo tools/travis-setup-rmq.sh; fi
#                echo '127.0.0.1 muc.localhost' | sudo tee -a /etc/hosts
#          - run:
#              name: Run tests
#              command: |
#                KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p $PRESET -s false

jobs:
###############################
  otp_20_3_mnesia:
    parallelism: 1
    machine:
      docker_layer_caching: true
    environment:
      MIX_ENV: test
      SKIP_RELEASE: 0
      SKIP_COMPILE: 0
      SKIP_BUILD_TESTS: 0
      PRESET: internal_mnesia
      DB: mnesia
      SKIP_COV: 0

    steps:
      - checkout
      - mim/install_erlang:
          otp: 1:20.3.8.22-1
      - mim/setup_db_and_run_tests:
          preset: internal_mnesia
          db: mnesia
###############################
  otp_20_3_pgsql:
    parallelism: 1
    machine:
      docker_layer_caching: true
    environment:
      MIX_ENV: test
      SKIP_RELEASE: 0
      SKIP_COMPILE: 0
      SKIP_BUILD_TESTS: 0
      PRESET: pgsql_mnesia
      DB: pgsql
      SKIP_COV: 0

    steps:
      - checkout
      - mim/install_erlang:
          otp: 1:20.3.8.22-1
      - mim/setup_db_and_run_tests:
          preset: pgsql_mnesia
          db: pgsql
###############################
  otp_20_3_riak:
    parallelism: 1
    machine:
      docker_layer_caching: true
    environment:
      MIX_ENV: test
      SKIP_RELEASE: 0
      SKIP_COMPILE: 0
      SKIP_BUILD_TESTS: 0
      PRESET: riak_mnesia
      DB: riak
      SKIP_COV: 0

    steps:
      - checkout
      - mim/install_erlang:
          otp: 1:20.3.8.22-1
      - mim/setup_db_and_run_tests:
          preset: riak_mnesia
          db: riak

workflows:
  version: 2
  build_and_test:
    jobs:
      - mim/build:
          name: otp_20_3
          otp: 1:20.3.8.22-1
      - otp_20_3_mnesia:
          requires:
            - otp_20_3
      - otp_20_3_pgsql:
          requires:
            - otp_20_3
      - otp_20_3_riak:
          requires:
            - otp_20_3
