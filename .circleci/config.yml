version: 2.1


orbs:
  mim:
    commands:
      install_erlang:
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
          preset:
            type: string
            description: Preset type
            default: internal_mnesia
          db:
            type: string
            description: Preset type
            default: mnesia
          rel_config:
            type: string
            description: Rel config type
            default: with-all
        steps:
        - run:
            name: Install Erlang
            command: |
              wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
              sudo dpkg -i erlang-solutions_1.0_all.deb
              sudo apt-get update
              sudo apt-get install -y esl-erlang=<<parameters.otp>>

      setup_db_and_run_tests:
        steps:
        - restore_cache:
            keys:
              - build-cache-{{ .Branch }}-{{ .Revision }}
        - restore_cache:
            keys:
              - deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}
        - run:
            name: ECHO PRESET
            command: |
              echo $PRESET
        - run:
            name: Build tests
            command: |
              test 1 = "$SKIP_BUILD_TESTS" || tools/travis-build-tests.sh
              test 1 = "$SKIP_COV" || pip install --user codecov
        - run:
            name: Setup database
            command: |
              tools/travis-setup-db.sh
              if [ $PRESET = ldap_mnesia ]; then sudo tools/travis-setup-ldap.sh; fi
              if [ $PRESET = mysql_redis ]; then sudo tools/travis-setup-rmq.sh; fi
              echo '127.0.0.1 muc.localhost' | sudo tee -a /etc/hosts
        - run:
            name: Run tests
            command: |
              KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p $PRESET -s $RUN_SMALL_TESTS

    executors:
      erlang_image:
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
        docker:
          - image: circleci/erlang:<<parameters.opt>>

    jobs:
      build:
        parallelism: 1
        machine:
          docker_layer_caching: true
        parameters:
          otp:
            type: string
            description: Version of the Erlang package to install
          rel_config:
            type: string
            description: Rel config type
            default: with-all

        environment:
          SKIP_RELEASE: 0
          REL_CONFIG: <<parameters.rel_config>>
          SKIP_COMPILE: 0
          SKIP_BUILD_TESTS: 0
          SKIP_COV: 0
        working_directory: ~/app


        steps:
          - checkout
          - install_erlang:
              otp: <<parameters.otp>>
          - restore_cache:
              key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}
          - run:
              name: Get deps
              command: |
                sudo apt install unixodbc-dev
                test 1 = "$SKIP_COV" || sudo apt install python-pip
                test 1 = "$SKIP_RELEASE" || tools/configure $REL_CONFIG
                test 1 = "$SKIP_COMPILE" || ./rebar3 get-deps
          - save_cache:
              key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}
              paths: ~/.cache/rebar3
          - restore_cache:
              key: build-cache-{{ .Branch }}-{{ .Revision }}
          - run:
              name: Compile
              command: |
                test 1 = "$SKIP_COMPILE" || ./rebar3 compile
          - run:
              name: Make certs
              command: |
                test 1 = "$SKIP_COMPILE" || make certs
          - run:
              name: Install
              command: |
                test 1 = "$SKIP_RELEASE" || make devrel
          - save_cache:
              key: build-cache-{{ .Branch }}-{{ .Revision }}
              paths:
                - _build
                - tools
                - priv
                - rel

#      test:
#        parallelism: 1
#        machine:
#          docker_layer_caching: true
#        working_directory: ~/app
#        parameters:
#          skip_release:
#            type: string
#            description: skip release
#            default: 0
#          run_small_tests:
#            type: string
#            description: run small tests
#            default: false
#          skip_compile:
#            type: string
#            description: skip compile
#            default: 0
#          skip_build_tests:
#            type: string
#            description: skip compile
#            default: 0
#          preset:
#            type: string
#            description: preset
#            default: internal_mnesia
#          db:
#            type: string
#            description: db
#            default: mnesia
#          skip_cov:
#            type: string
#            description: skip cov
#            default: 0
#        environment:
#          MIX_ENV: test
#          SKIP_RELEASE: <<parameters.skip_release>>
#          RUN_SMALL_TESTS: <<parameters.run_small_tests>>
#          SKIP_COMPILE: <<parameters.skip_compile>>
#          SKIP_BUILD_TESTS: <<parameters.skip_build_tests>>
#          PRESET: <<parameters.preset>>
#          DB: <<parameters.db>>
#          SKIP_COV: <<parameters.skip_cov>>
#        steps:
#          - checkout
#          - mim/install_erlang:
#              otp: 1:20.3.8.22-1
#          - mim/setup_db_and_run_tests
#          - run:
#              name: Build Success
#              when: on_success
#              ## TODO what is travis OTP RELEASE
#              command: |
#                echo "Success!"
#                test 1 = "$SKIP_COV" || ./rebar3 codecov analyze
#                test 1 = "$SKIP_COV" || codecov --disable=gcov --env PRESET
#                test 1 = "$SKIP_COV" || ./rebar3 coveralls send
#                if [ -n "${DOCKERHUB_PASS}" ] && [ $PRESET = 'internal_mnesia' ] && [ $TRAVIS_OTP_RELEASE = "20.3" ];
#                then tools/travis-build-and-push-docker.sh;
#                fi
#        - run:
#            name: Build Failed
#            when: on_fail
#            command: |
#              echo "Failure!"
#              cat `ls -1 -d -t apps/ejabberd/logs/ct_run* | head -1`/apps.ejabberd.logs/run.*/suite.log
#              if [ -s _build/mim1/rel/mongooseim/log/crash.log ]; then cat _build/mim1/rel/mongooseim/log/crash.log; fi
#              if [ -s _build/mim2/rel/mongooseim/log/crash.log ]; then cat _build/mim2/rel/mongooseim/log/crash.log; fi
#              tail -100 _build/mim1/rel/mongooseim/log/ejabberd.log
#              tail -100 _build/mim2/rel/mongooseim/log/ejabberd.log
#        - run:
#                    # Upload logs to s3 for debugging
#            name: Upload results
#            command: |
#              test 1 = "$SKIP_REPORT_UPLOAD" ||
#                tools/travis-prepare-log-dir.sh
#              test 1 = "$SKIP_REPORT_UPLOAD" ||
#                if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then tools/travis-upload-to-s3.sh; fi
#              test 1 = "$SKIP_REPORT_UPLOAD" ||
#                tools/travis-publish-github-comment.sh
#              test 1 = "$SKIP_REPORT_UPLOAD" ||
#                if [ -n "${GDRIVE_SERVICE_ACCOUNT_CREDENTIALS}" ]; then tools/travis-upload-to-gdrive.sh; fi
#              test 1 = "$SKIP_REPORT_UPLOAD" ||
#                tools/travis-secure-erase.sh /tmp/serviceAccountCredentials


#      tests:
#        parallelism: 1
#        machine:
#          docker_layer_caching: true
#        parameters:
#          otp:
#            type: string
#            description: Version of the Erlang package to install
#          preset:
#            type: string
#            description: Preset type
#            default: internal_mnesia
#          db:
#            type: string
#            description: Preset type
#            default: mnesia
#
#        environment:
#          MIX_ENV: test
#          SKIP_RELEASE: 0
#          SKIP_COMPILE: 0
#          SKIP_BUILD_TESTS: 0
#          PRESET: <<parameters.preset>>
#          DB: <<parameters.db>>
#          SKIP_COV: 0
#
#        working_directory: ~/app
#        steps:
#          - checkout
#          - install_erlang:
#              otp: <<parameters.otp>>
#          - run:
#              name: Get packages
#              command: |
#                sudo apt install unixodbc-dev
##          - attach_workspace:
##               at: ~/app
#          - restore_cache:
#              keys:
#                - deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}
#          - restore_cache:
#              keys:
#                - build-cache-{{ .Branch }}-{{ .Revision }}
#          - run:
#              name: Build tests
#              command: |
#                test 1 = "$SKIP_BUILD_TESTS" || tools/travis-build-tests.sh
#                test 1 = "$SKIP_COV" || pip install --user codecov
#          - run:
#              name: Setup database
#              command: |
#                tools/travis-setup-db.sh
#                if [ $PRESET = 'ldap_mnesia' ]; then sudo tools/travis-setup-ldap.sh; fi
#                if [ $PRESET = 'mysql_redis' ]; then sudo tools/travis-setup-rmq.sh; fi
#                echo '127.0.0.1 muc.localhost' | sudo tee -a /etc/hosts
#          - run:
#              name: Run tests
#              command: |
#                KEEP_COVER_RUNNING=1 ./tools/travis-test.sh -p $PRESET -s false

jobs:
###############################
  internal_mnesia:
    parallelism: 1
    machine:
      docker_layer_caching: true
    working_directory: ~/app
    environment:
      MIX_ENV: test
      SKIP_RELEASE: 0
      RUN_SMALL_TESTS: false
      SKIP_COMPILE: 0
      SKIP_BUILD_TESTS: 0
      PRESET: internal_mnesia
      DB: mnesia
      SKIP_COV: 0
    steps:
      - checkout
      - mim/install_erlang:
          otp: 1:20.3.8.22-1
      - mim/setup_db_and_run_tests
###############################
  small_tests:
    parallelism: 1
    machine:
      docker_layer_caching: true
    working_directory: ~/app
    environment:
      MIX_ENV: test
      SKIP_RELEASE: 1
      RUN_SMALL_TESTS: true
      SKIP_COMPILE: 0
      SKIP_BUILD_TESTS: 1
      PRESET: small_tests
      DB: mnesia
      SKIP_COV: 0
    steps:
      - checkout
      - mim/install_erlang:
          otp: 1:20.3.8.22-1
      - mim/setup_db_and_run_tests
###############################
  mssql_mnesia:
    parallelism: 1
    machine:
      docker_layer_caching: true
    working_directory: ~/app
    environment:
      MIX_ENV: test
      SKIP_RELEASE: 0
      RUN_SMALL_TESTS: true
      SKIP_COMPILE: 0
      SKIP_BUILD_TESTS: 0
      PRESET: odbc_mssql_mnesia
      DB: mssql
      SKIP_COV: 0
    steps:
      - checkout
      - mim/install_erlang:
          otp: 1:20.3.8.22-1
      - mim/setup_db_and_run_tests
###############################
  ldap_mnesia:
    parallelism: 1
    machine:
      docker_layer_caching: true
    working_directory: ~/app
    environment:
      MIX_ENV: test
      SKIP_RELEASE: 0
      RUN_SMALL_TESTS: true
      SKIP_COMPILE: 0
      SKIP_BUILD_TESTS: 0
      PRESET: ldap_mnesia
      DB: mnesia
      SKIP_COV: 0
    steps:
      - checkout
      - mim/install_erlang:
          otp: 1:20.3.8.22-1
      - mim/setup_db_and_run_tests
###############################
  elasticsearch_cassandra:
    parallelism: 1
    machine:
      docker_layer_caching: true
    working_directory: ~/app
    environment:
      MIX_ENV: test
      SKIP_RELEASE: 0
      RUN_SMALL_TESTS: true
      SKIP_COMPILE: 0
      SKIP_BUILD_TESTS: 0
      PRESET: elasticsearch_and_cassandra_mnesia
      DB: "elasticsearch cassandra"
      ELASTICSEARCH_VERSION: 5.6.9
      CASSANDRA_VERSION: 3.9
      TEST_SPEC: mam.spec
      SKIP_COV: 0
    steps:
      - checkout
      - mim/install_erlang:
          otp: 1:20.3.8.22-1
      - mim/setup_db_and_run_tests
##################################
workflows:
  version: 2
  build_and_test:
    jobs:
      - mim/build:
          name: mim_otp_20_3
          otp: 1:20.3.8.22-1
      - mim/build:
          name: mim_otp_21_3
          otp: 1:21.3.8.4
      - internal_mnesia:
          requires:
            - mim_otp_20_3
      - small_tests:
          requires:
            - mim_otp_20_3
      - mssql_mnesia:
          requires:
            - mim_otp_20_3
      - ldap_mnesia:
          requires:
            - mim_otp_20_3
      - elasticsearch_cassandra:
          requires:
            - mim_otp_20_3