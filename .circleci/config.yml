version: 2.1

filters: &all_tags
  tags:
    only: /^\d+\.\d+\.\d+([a-z0-9\-\+])*/

commands:
  fetch_build_packages:
    steps:
      - run:
          name: Install packages necessary for building
          command: |
            sudo killall -9 apt-get || true && \
            echo "Acquire::ForceIPv4 'true';" | sudo tee -a /etc/apt/apt.conf.d/99force-ipv4 && \
            sudo apt-get update && \
            sudo apt-get install libssl-dev unixodbc-dev unixodbc tdsodbc rsync zlib1g-dev -y
  fetch_coverage_packages:
    steps:
      - run:
          name: Install pip3 and codecov packages
          command: |
            sudo killall -9 apt-get || true && \
            echo "Acquire::ForceIPv4 'true';" | sudo tee -a /etc/apt/apt.conf.d/99force-ipv4 && \
            sudo apt-get update && \
            sudo apt-get install python3-pip -y && \
            pip3 install codecov && codecov
  upload_results_to_aws:
    steps:
      - run:
          name: Upload results
          when: always
          command: |
              tools/circleci-prepare-log-dir.sh
              if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then tools/circleci-upload-to-s3.sh; fi
  run_coverage_analysis:
    steps:
      - run:
          name: Coverage
          when: on_success
          command: |
            echo "Success!"
            ./rebar3 codecov analyze
            codecov --disable=gcov --env PRESET
  install_dockerize:
    steps:
      - run:
          name: Install dockerize
          command: |
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
  dockerize_wait:
    parameters: {port: {type: integer}}
    steps:
      - run:
          name: Wait for port << parameters.port >>
          command: dockerize -wait tcp://localhost:<< parameters.port >> -timeout 60s
  maybe_prepare_minio:
    steps:
      - run:
          name: Install minio client, prepare minio
          environment:
            - MINIO_HOSTNAME: "mongooseim-minio"
            - MINIO_ACCESS_KEY: "AKIAIAOAONIULXQGMOUA"
            - MINIO_SECRET_KEY: "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"
            - MINIO_BUCKET: "mybucket"
          command: |
            if [[ "$DB" == *minio* ]]; then
                curl -sSL https://dl.minio.io/client/mc/release/linux-amd64/mc -o ./mc
                chmod +x ./mc
                ./mc config host add ${MINIO_HOSTNAME} http://127.0.0.1:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY}
                ./mc mb ${MINIO_HOSTNAME}/${MINIO_BUCKET}
                ./mc policy set download "${MINIO_HOSTNAME}/${MINIO_BUCKET}"
            fi
  maybe_build_deps_and_cache:
    steps:
      - run:
          name: Prepare for cache
          command: echo $ERLANG_VERSION && echo $ERLANG_VERSION > otp_version
      - restore_cache:
          name: Maybe restore all rebar3 dependencies
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
      - run:
          name: Get deps
          command: |
            tools/configure with-all
            ./rebar3 get-deps
      - save_cache:
          name: Cache downloaded and built dependencies
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
          paths:
            - ~/.cache/rebar3
  restore_workspace:
    steps:
      - attach_workspace: {at: ~/app}
      - run:
          name: Prepare for cache
          command: echo $ERLANG_VERSION > otp_version
      - restore_cache:
          key: deps-cache--{{ checksum "rebar.lock" }}--{{ checksum "big_tests/rebar.lock" }}--{{ checksum "otp_version" }}
  restore_prod_build:
    steps:
      - run:
          name: Prepare for cache
          command: echo $ERLANG_VERSION > otp_version
      - restore_cache:
          key: prod-build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
  build_and_cache_prod_build:
    steps:
      - run:
          name: Generate prod release
          command: |
            echo $ERLANG_VERSION > otp_version
            make rel
      - save_cache:
          key: prod-build-cache-{{ .Branch }}-{{ .Revision }}--{{ checksum "otp_version" }}
          paths: ~/app/_build/prod/rel/mongooseim
  persist_workspace:
    steps:
      - run: git gc
      - persist_to_workspace:
          root: ~/app/
          paths: ["*"]
  maybe_prepare_pgsql:
    steps:
      - run:
         name: maybe configure pgsql
         command: |
           if [[ "$DB" == *pgsql* ]]; then
             sudo apt-get update
             sudo apt-get install -y postgresql-client-12
             psql -h 127.0.0.1 -p 5432 -U ejabberd -q -d ejabberd -f priv/pg.sql
           fi

references:
  - &OTP23 cimg/elixir:1.11  # Contains Erlang 23.1
  - &OTP22 cimg/elixir:1.10  # Contains Erlang 22.3.4
  - &OTP21 cimg/elixir:1.8.2 # Contains Erlang 21.3.8.8

executors:
  # With REDIS
  otp_23_pgsql:
    working_directory: ~/app
    docker:
      - image: *OTP23
      - image: circleci/redis:6.0.5
      - image: circleci/postgres:12.5-ram
        environment:
          - POSTGRES_PASSWORD: "mongooseim_secret"
          - POSTGRES_USER: "ejabberd"
          - POSTGRES_DB: "ejabberd"
  otp_23_redis_minio_rmq:
    working_directory: ~/app
    docker:
      - image: *OTP23
      - image: circleci/redis:6.0.5
      - image: minio/minio:latest
        environment:
          - MINIO_ACCESS_KEY: "AKIAIAOAONIULXQGMOUA"
          - MINIO_SECRET_KEY: "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"
        command: ["server", "/data"]
      - image: rabbitmq:3.7-alpine
  otp_23_redis:
    working_directory: ~/app
    docker:
      - image: *OTP23
      - image: circleci/redis:6.0.5
  otp_22_redis:
    working_directory: ~/app
    docker:
      - image: *OTP22
      - image: circleci/redis:6.0.5
  otp_21_redis:
    working_directory: ~/app
    docker:
      - image: *OTP21
      - image: circleci/redis:6.0.5

  # JUST OTP
  otp_23:
    working_directory: ~/app
    docker:
      - image: *OTP23
  otp_22:
    working_directory: ~/app
    docker:
      - image: *OTP22
  otp_21:
    working_directory: ~/app
    docker:
      - image: *OTP21

jobs:
  build:
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
      build_prod:
        type: boolean
        default: false
    parallelism: 1
    environment:
      SKIP_RELEASE: 1
      SKIP_COV: 0
    steps:
      - checkout
      - fetch_build_packages
      - maybe_build_deps_and_cache
      - run: ./rebar3 compile
      - run: make certs
      - run:
          name: Generate development releases
          command: ./tools/build-releases.sh
      - when:
          condition: << parameters.build_prod >>
          steps: [ build_and_cache_prod_build ]
      - run:
          name: Build Big Tests
          command: tools/build-tests.sh
      - persist_workspace

  small_tests:
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
    parallelism: 1
    environment:
      PRESET: small_tests
    steps:
      - restore_workspace
      - install_dockerize
      - dockerize_wait: {port: 6379}
      - run:
          name: Run Small Tests
          command: |
            dockerize -wait tcp://localhost:6379 -timeout 60s # Wait for redis
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/test.sh -p small_tests -s true -e true
      - fetch_coverage_packages
      - run_coverage_analysis
      - upload_results_to_aws

  dialyzer:
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
    parallelism: 1
    steps:
      - restore_workspace
      - run:
          name: Run Dialyzer
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/test.sh -p dialyzer_only -s false

  big_tests:
    executor: << parameters.executor >>
    parallelism: 1
    parameters:
      executor:
        type: executor
      preset:
        type: enum
        enum: [internal_mnesia, mysql_redis, odbc_mssql_mnesia, ldap_mnesia,
               elasticsearch_and_cassandra_mnesia, pgsql_mnesia, riak_mnesia]
        description: Preset to run
        default: internal_mnesia
      db:
        type: string
        description: Database to use
        default: mnesia
      tls_dist:
        type: boolean
        description: Erlang distribution with TLS enabled
        default: false
    environment:
      PRESET: <<parameters.preset>>
      DB: <<parameters.db>>
      TLS_DIST: <<parameters.tls_dist>>
      ELASTICSEARCH_VERSION: 5.6.9
      CASSANDRA_VERSION: 3.9
      REDIS_VERSION: 3.2.10
    steps:
      - restore_workspace
      - install_dockerize
      - dockerize_wait: {port: 6379} # Wait for redis
      - dockerize_wait: {port: 5672} # Wait for rmq
      - maybe_prepare_minio
      - maybe_prepare_pgsql
      - run:
          name: Prepare /etc/hosts
          command: |
            echo '127.0.0.1 muc.localhost' | sudo tee -a /etc/hosts
            echo '127.0.0.1 localhost.bis' | sudo tee -a /etc/hosts
            echo '127.0.0.1 localhost' | sudo tee -a /etc/hosts
      - run:
          name: Run Big Tests
          command: |
            SKIP_AUTO_COMPILE=true KEEP_COVER_RUNNING=1 ./tools/test.sh -p $PRESET -s false
          no_output_timeout: 40m
      - fetch_coverage_packages
      - run_coverage_analysis
      - run:
          name: Build Failed - Logs
          when: on_fail
          command: |
            echo "Failure!"
            if [ -s _build/mim1/rel/mongooseim/log/crash.log ]; then cat _build/mim1/rel/mongooseim/log/crash.log; fi
            tail -100 _build/mim1/rel/mongooseim/log/mongooseim.log.1
      - upload_results_to_aws

  docker_image:
    parallelism: 1
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
    steps:
      - checkout
      - setup_remote_docker
      - restore_prod_build
      - run:
          name: Execute Docker image build and upload
          command: tools/circle-build-and-push-docker.sh

  package:
    parallelism: 1
    executor: << parameters.executor >>
    parameters:
      executor:
        type: executor
      platform:
        type: enum
        enum: [centos_7, debian_stretch]
        description: Platform type
      otp_package:
        type: string
        description: Version of the Erlang package to install
    environment:
      pkg_PLATFORM: <<parameters.platform>>
      ESL_ERLANG_PKG_VER: <<parameters.otp_package>>
      PRESET: pkg
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build package
          command: |
            KEEP_COVER_RUNNING=1 ./tools/test.sh -p pkg -s false

  docs_build_deploy:
    parallelism: 1
    docker:
      - image: cimg/python:3.9.0
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Test that docs build
          command: |
            pip3 install mkdocs
            pip3 install mkdocs-material
            mkdocs build --strict
      - when:
          condition:
            or:
              - equal: [ master, << pipeline.git.branch >> ]
              - << pipeline.git.tag >>
          steps:
            - add_ssh_keys
            - run:
                name: Configure Git
                command: |
                  git config --global user.email "mongoose-im@erlang-solutions.com"
                  git config --global user.name "mongooseim"
            - run:
                name: Generate image tag
                command: |
                  set -x
                  if [ -n "$CIRCLE_TAG" ]; then
                      DOCS_TAG="$CIRCLE_TAG"
                  elif [ "$CIRCLE_BRANCH" == "master" ]; then
                      DOCS_TAG="latest"
                  else
                      DOCS_TAG=`echo $CIRCLE_BRANCH | sed 's,/,_,g'`
                  fi
                  env | sort
                  echo "export DOCS_TAG=$DOCS_TAG" >> $BASH_ENV
            - run:
                name: Build latest
                command: |
                  git fetch git@github.com:esl/MongooseDocs.git gh-pages:gh-pages
                  pip3 install mike
                  mike deploy $DOCS_TAG --remote git@github.com:esl/MongooseDocs.git --branch gh-pages --push --rebase

workflows:
  version: 2
  build_and_test:
    jobs:
      # ============= PACKAGES =============
      - package:
          name: centos_7
          executor: otp_23
          platform: centos_7
          context: mongooseim-org
          otp_package: 23.1-1
      - package:
          name: debian_stretch
          executor: otp_23
          platform: debian_stretch
          context: mongooseim-org
          otp_package: 23.1-1
      # ============= BASE BUILDS =============
      - build:
          name: otp_23
          executor: otp_23
          context: mongooseim-org
          build_prod: true
      - build:
          name: otp_22
          executor: otp_22
          context: mongooseim-org
      - build:
          name: otp_21
          executor: otp_21
          context: mongooseim-org
      # ============= SMALL TESTS =============
      - small_tests:
          name: small_tests_23
          executor: otp_23_redis
          context: mongooseim-org
          requires:
            - otp_23
      - small_tests:
          name: small_tests_22
          executor: otp_22_redis
          context: mongooseim-org
          requires:
            - otp_22
      - small_tests:
          name: small_tests_21
          executor: otp_21_redis
          context: mongooseim-org
          requires:
            - otp_21
      # ============= MOST RECENT VERSION TESTS =============
      - big_tests:
          name: internal_mnesia
          executor: otp_23_redis_minio_rmq
          context: mongooseim-org
          preset: internal_mnesia
          db: "mnesia redis minio rmq"
          tls_dist: true
          requires:
            - otp_23
      - big_tests:
          name: pgsql_mnesia
          executor: otp_23_pgsql
          context: mongooseim-org
          preset: pgsql_mnesia
          db: "pgsql redis"
          requires:
            - otp_23
      # ============= DIALYZER =============
      - dialyzer:
          name: dialyzer
          executor: otp_23
          context: mongooseim-org
          requires:
            - otp_23
      # ============= DOCUMENTATION =============
      - docs_build_deploy:
          name: build_and_deploy_docs
          context: mongooseim-org
          filters: *all_tags
      # ============= DOCKER IMAGE BUILD & UPLOAD =============
      - docker_image:
          name: docker_build_and_ship
          executor: otp_23
          context: mongooseim-org
          requires:
            - small_tests_23
            - small_tests_22
            - small_tests_21
            - dialyzer
            - build_and_deploy_docs
            - internal_mnesia
            - pgsql_mnesia
