MaybeReadFromConfig =
fun ({ok, Content}) ->
        Parts = binary:split(Content, <<"\n">>, [global]),
	%% find only this line which starts with "export APPS="
	[Apps] = [Item || <<"export APPS=\"",Item/binary>> <- Parts],
	%% remove trailing " and conver to string
	binary_to_list(binary:part(Apps, 0, size(Apps) - 1));
    (_) ->
        io:format("WARNING! The configure.out file was not created, using minimal configuration~n"),
	""
end,

ReadFromConfig = fun(Path) ->
    case filelib:is_file(Path) of
        true ->
	    MaybeReadFromConfig(file:read_file(Path));
        _ ->
	    Script = filename:join(["..", "tools", "configure"]),
	    os:cmd(Script ++ " with-all"),
	    MaybeReadFromConfig(file:read_file("configure.out"))
  end
end,

GetEnvApps = fun() ->
    case os:getenv("APPS") of
        false ->
	  ConfigurePath = filename:join("..", "configure.out"),
	  ReadFromConfig(ConfigurePath);
	EnvApps ->
	   EnvApps
    end
end,

EnvApps = GetEnvApps(),
EnvAppsToInclude = [ list_to_atom(App) || App <- string:tokens(EnvApps, " \n\r") ],
AppsToRun = [compiler,
             lager,
             syslog,
             lager_syslog,
             kernel,
             mnesia,
             sasl,
             ssl,
             stdlib,
             ejabberd,
             inets,
             syntax_tools,
             stringprep,
             xmerl,
             exml,
             cowboy,
             fusco,
             exometer,
             fast_tls],

BaseAppsToInclude = AppsToRun ++
                    [asn1,
                     crypto,
                     public_key,
                     goldrush,
                     runtime_tools,
                     p1_utils,
                     ranch,
                     cowlib,
                     bear,
                     mochijson2,
                     jiffy,
                     lasse,
                     cache_tab,
                     pa,
                     usec,
                     base16,
                     cuesport,
                     alarms,
                     idna,
                     recon,
                     poolboy,
                     worker_pool,
                     uuid,
                     setup,
                     exometer_core
                     ],

DevAppsToInclude = case os:getenv("DEVNODE") of
                       false -> [];
                       _ -> [meck]
                   end.

AppsToIncludeIn = BaseAppsToInclude ++ EnvAppsToInclude ++ DevAppsToInclude,

AppsToInclude = ordsets:to_list(ordsets:from_list(AppsToIncludeIn)),

IncludeApps = lists:map(fun(App) -> {app, App, [{incl_cond, include}]} end, AppsToInclude),


[{sys, [
        {lib_dirs, ["../apps", "../deps"]},
        {incl_cond, exclude},
        {rel, "mongooseim", "", [mongooseim | AppsToRun]},
        {rel, "start_clean", "", [kernel,stdlib]},
        {boot_rel, "mongooseim"},
        {profile, embedded},
        {excl_archive_filters, [".*"]}, % do no archive built libs
        {excl_sys_filters, ["^bin/.*",
                            "^erts.*/bin/(dialyzer|typer)"]},

        {app, mongooseim, [{incl_cond, include}, {lib_dir, ".."}]}
       ] ++ IncludeApps},


{target_dir, "mongooseim"},

{overlay_vars, "vars.config"},

{overlay, [
           {mkdir, "priv"},
           {copy, "files/sample_external_auth.py", "priv/sample_external_auth.py"},

           {mkdir, "priv/ssl"},
           {copy, "../fake_cert.pem", "priv/ssl/fake_cert.pem"},
           {copy, "../fake_key.pem", "priv/ssl/fake_key.pem"},
           {copy, "../fake_server.pem", "priv/ssl/fake_server.pem"},
           {copy, "../fake_dh_server.pem", "priv/ssl/fake_dh_server.pem"},

           {copy, "files/erl", "\{\{erts_vsn\}\}/bin/erl"},
           {copy, "files/nodetool", "\{\{erts_vsn\}\}/bin/nodetool"},
           {copy, "files/mongooseimctl", "bin/mongooseimctl"},

           {template, "files/mongooseim", "bin/mongooseim"},
           {template, "files/mongooseimctl", "bin/mongooseimctl"},
           {template, "files/app.config", "etc/app.config"},
           {template, "files/vm.args", "etc/vm.args"},
           {template, "files/ejabberd.cfg", "etc/ejabberd.cfg"}
          ]}
].
