{ok, Path} = file:get_cwd(),
EnvApps = os:getenv("APPS"),
EnvApps =/= false orelse error("APPS not defined"),
EnvAppsToInclude = [ list_to_atom(App)
                     || App <- string:tokens(EnvApps, " \n\r") ],
AppsToRun = [compiler,
             lager,
             syslog,
             lager_syslog,
             kernel,
             mnesia,
             sasl,
             ssl,
             stdlib,
             ejabberd,
             inets,
             syntax_tools,
             stringprep,
             xmerl,
             exml,
             cowboy,
             fusco,
             exometer],

BaseAppsToInclude = AppsToRun ++
                    [asn1,
                     crypto,
                     public_key,
                     goldrush,
                     runtime_tools,
                     p1_utils,
                     ranch,
                     cowlib,
                     bear,
                     mochijson2,
                     jiffy,
                     cache_tab,
                     pa,
                     usec,
                     base16,
                     cuesport,
                     alarms,
                     idna,
                     recon,
                     poolboy,
                     setup,
                     exometer_core
                     ],

DevAppsToInclude = case os:getenv("DEVNODE") of
                       false -> [];
                       _ -> [meck]
                   end.

AppsToIncludeIn = BaseAppsToInclude ++ EnvAppsToInclude ++ DevAppsToInclude,

AppsToInclude = ordsets:to_list(ordsets:from_list(AppsToIncludeIn)),

IncludeApps = lists:map(fun(App) -> {app, App, [{incl_cond, include}]} end, AppsToInclude),


[{sys, [
        {lib_dirs, ["../apps", "../deps"]},
        {incl_cond, exclude},
        {rel, "mongooseim", "", [mongooseim | AppsToRun]},
        {rel, "start_clean", "", [kernel,stdlib]},
        {boot_rel, "mongooseim"},
        {profile, embedded},
        {excl_archive_filters, [".*"]}, % do no archive built libs
        {excl_sys_filters, ["^bin/.*",
                            "^erts.*/bin/(dialyzer|typer)"]},

        {app, mongooseim, [{incl_cond, include}, {lib_dir, ".."}]}
       ] ++ IncludeApps},


{target_dir, "mongooseim"},

{overlay_vars, "vars.config"},

{overlay, [
           {mkdir, "priv"},
           {copy, "files/sample_external_auth.py", "priv/sample_external_auth.py"},

           {mkdir, "priv/ssl"},
           {copy, "../fake_cert.pem", "priv/ssl/fake_cert.pem"},
           {copy, "../fake_key.pem", "priv/ssl/fake_key.pem"},
           {copy, "../fake_server.pem", "priv/ssl/fake_server.pem"},

           {copy, "files/erl", "\{\{erts_vsn\}\}/bin/erl"},
           {copy, "files/nodetool", "\{\{erts_vsn\}\}/bin/nodetool"},
           {copy, "files/mongooseimctl", "bin/mongooseimctl"},

           {template, "files/mongooseim", "bin/mongooseim"},
           {template, "files/mongooseimctl", "bin/mongooseimctl"},
           {template, "files/app.config", "etc/app.config"},
           {template, "files/vm.args", "etc/vm.args"},
           {template, "files/ejabberd.cfg", "etc/ejabberd.cfg"}
          ]}
].
