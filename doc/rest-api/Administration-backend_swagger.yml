swagger: '2.0'
info:
  version: "1.0.0"
  title: "MongooseIM's REST Control API"
  description: |
    Explore MongooseIM features using our REST API.

    If you are familiar with the `mongooseimctl` command, the provided control functionality will seem very similar.
    The response objects are modeled on the `ejabberd_commands` entries and print-outs from `mongooseimctl`.

    Please note that many of the fields such as **username** or **caller** expect a **JID** (jabber identifier, f.e. **alice@wonderland.com**). There are two types of **JIDs**:
      * **bare JID** - consists of **username** and **domain name** (XMPP host, usually the one set in your `ejabberd.cfg` file).
      * **full JID** - is a **bare JID** with online user's resource to uniquely identify user's connection (f.e. **alice@wonderland.com/resource**).
schemes:
  - http
basePath: /api
consumes:
  - application/json
produces:
  - application/json
host: "localhost:8088"
paths:
  /commands:
    get:
      description: Lists the available commands for administering MongooseIM.
      tags:
        - "commands"
      responses:
        200:
          description: A list of information on all the commands that are currently available.
          schema:
            title: commandList
            type: array
            items:
              title: commandDescription
              type: object
              properties:
                name:
                  type: string
                category:
                  type: string
                action:
                  type: string
                desc:
                  type: string
  /users/{XMPPHost}:
    parameters:
      - $ref: '#/parameters/hostName'
    get:
      description: Retrieves a list of users registered under the given XMPP hostname.
      tags:
        - "user management"
      responses:
        200:
          description: A list of users registered under the given XMPP hostname
          schema:
            title: userList
            type: array
            example:
              - "alice@wonderland.com"
              - "bob@wonderland.com"
            items:
              type: string
              format: JID
    post:
      tags:
        - "user management"
      parameters:
        - name: Credentials
          in: body
          description: User's name and password
          required: true
          schema:
            title: Credentials
            type: object
            properties:
              username:
                example: "alice"
                type: string
              password:
                example: "makota"
                type: string
                format: password
      description: Register a user under the given domain.
      responses:
        201:
          description: A user with the given username and password has been registered
          schema:
            title: successMessage
            type: string
  /users/{XMPPHost}/{username}:
    parameters:
      - $ref: '#/parameters/hostName'
      - name: username
        in: path
        description: The username part of the user's JID
        required: true
        type: string
    put:
      tags:
        - "user management"
      parameters:
        - name: password
          in: body
          description: The new password for the user
          required: true
          schema:
            properties:
              newpass:
                type: string
                format: password
      description: Change the user's password.
      responses:
        204:
          description: Password has been changed
    delete:
      tags:
        - "user management"
      description: Cancel a user's registration under the given domain.
      responses:
        204:
          description: The user's registration has been successfully canceled
          schema:
            title: successMessage
            type: string
  /sessions/{XMPPHost}:
    parameters:
      - $ref: '#/parameters/hostName'
    get:
      tags:
        - "session management"
      description: Retrieve a list of sessions.
      responses:
        200:
          description: A list of sessions.
          schema:
            example:
              - "alice@wonderland.lit/resource"
              - "bob@wonderland.lit/resource"
            title: userList
            type: array
            items:
              title: JID
              type: string
              description: "User's full JID"
              format: JID
  /sessions/{XMPPHost}/{username}/{resource}:
    parameters:
      - $ref: '#/parameters/hostName'
      - name: username
        in: path
        description: The leading part of a user's JID.
        required: true
        type: string
      - name: resource
        in: path
        description: A resource name for the given user.
        required: true
        type: string
    delete:
      tags:
        - "session management"
      description: Terminate this session (connection).
      responses:
        204:
          description: Session (connection) terminated.
          schema:
            title: userList
            type: string
  /messages:
    post:
      tags:
        - "one-to-one messages"
      parameters:
        - name: message
          in: body
          description: The chat stanza (with a sender and recipient)
          required: true
          schema:
            title: message
            type: object
            properties:
              caller:
                description: the sender of the message
                type: string
                format: JID
                example: "alice@wonderland.lit"
              to:
                description: the recipient of the message
                type: string
                format: JID
                example: "rabbit@wonderland.lit"
              body:
                description: the message text
                type: string
                example: "Hi Rabbit!"
      description: Send a chat message from one user to another.
      responses:
        204:
          description: Message was sent
  /messages/{owner}:
    get:
      tags:
        - "one-to-one messages"
      parameters:
        - name: owner
          in: path
          description: User's JID (f.e. alice@wonderland.lit)
          required: true
          type: string
          format: JID
        - name: before
          in: query
          description: Messages earlier then the given timestamp (defaults to now)
          required: false
          type: integer
        - name: limit
          in: query
          description: An upper bound on the number of messages to fetch from the archive (defaults to 100)
          required: false
          type: integer
      description: |
        Retrieve recent messages from the given user's archive.
        This works only with `mod_mam` enabled.
      responses:
        200:
          description: The messages archived for the given user
          schema:
            $ref: '#/definitions/messageList'
  /messages/{owner}/{with}:
    get:
      tags:
        - "one-to-one messages"
      parameters:
        - name: owner
          in: path
          description: User's JID (f.e. alice@wonderland.lit)
          required: true
          type: string
        - name: with
          in: path
          description: The other party's JID
          required: true
          type: string
        - name: before
          in: query
          description: Messages earlier then the given timestamp (defaults to now).
          required: false
          type: integer
        - name: limit
          in: query
          description: An upper bound on the number of messages to fetch from the archive (defaults to 100)
          required: false
          type: integer
      description: |
        Retrieve recent message from archive, only those exchanged with the given contact.
        This works only with `mod_mam` enabled.
      responses:
        200:
          description: The messages archived for the given user and the other party.
          schema:
            $ref: '#/definitions/messageList'
  /contacts/{user}:
    get:
      description: "Returns all contacts from the user's roster"
      tags:
        - "Contacts"
      parameters:
        - name: user
          in: path
          description: User's JID (f.e. alice@wonderland.lit)
          required: true
          type: string
      responses:
        200:
          description: "Contacts"
          schema:
            title: Contacts
            type: array
            items:
              $ref: '#/definitions/ContactDetails'
    post:
      description: "Adds a user to a contact list."
      tags:
        - "Contacts"
      parameters:
        - in: body
          name: contact
          required: true
          schema:
            title: addcontact
            type: object
            properties:
              jid:
                type: string
                format: JID
                description: Contact's jid
                example: "alice@wonderlant.lit"
      responses:
        204:
          description: "The user was added to a contacts list."
  /contacts/{user}/{contact}:
    parameters:
      - in: path
        name: user
        required: true
        type: string
      - in: path
        name: contact
        required: true
        type: string
    put:
      description: "Manage subscription"
      tags:
        - "Contacts"
      parameters:
        - in: body
          name: action
          required: true
          schema:
            type: string
            enum: ["invite", "accept"]
      responses:
        204:
          description: "A subscription request was sent to the contact
          with value 'subscribe' or 'subscribed' (it may and may not change
          the 'subscription' and 'ask' states, depending what they were)"
        404:
          description: "The contact is not in the user's roster"
    delete:
      description: "Removes contact"
      tags:
        - "Contacts"
      responses:
        204:
          description: "The contact was successfully deleted."
        404:
          description: "There was no such contact."
  /contacts/{user}/{contact}/manage:
    parameters:
      - in: path
        name: user
        required: true
        type: string
      - in: path
        name: contact
        required: true
        type: string
    put:
      description: "An administrative action to set roster entries and two-way subscriptions.
      There are two possible actions: 'connect' sets roster entries and performs subsciption in both ways, thus
      effectively connecting the two users; 'disconnect' removes them from each other's roster.
      The operation involves many stages and is not atomic (can succeed partially)."
      tags:
        - "Contacts"
      parameters:
        - in: body
          name: action
          required: true
          schema:
            type: string
            enum: ["connect", "disconnect"]
      responses:
        204:
          description: "The operation was successful."
  /muc-lights/{XMPPHost}:
    parameters:
      - $ref: '#/parameters/hostName'
    post:
      tags:
        - "MUC-light management"
      description: Create a MUC Light room under the given XMPP hostname.
      consumes:
        - application/json
      parameters:
        - name: roomDetails
          in: body
          description: Details for the room to be created
          required: true
          schema:
            title: roomDetails
            type: object
            properties:
              owner:
                type: string
                format: JID
                description: The user's JID on whose behalf to create the room
                example: "alice@wonderland.lit"
              name:
                type: string
                description: |
                  The name of the room. **NOT** the room's JID.
                  This is the name that goes into the room's configuration.
                example: "Rabbit hole"
              subject:
                type: string
                description: Room's initial subject
                example: "Magic stuff"
      responses:
        201:
          description: Room was created
          schema:
            title: roomName
            type: string
    put:
      tags:
        - "MUC-light management"
      description: Create a MUC Light room with the given ID.
      consumes:
        - application/json
      parameters:
        - name: roomDetails
          in: body
          description: Details for the room to be created (including ID)
          required: true
          schema:
            title: roomDetails
            type: object
            properties:
              id:
                type: string
                description: |
                  The leading part of the room's JID.
                  If the ID is "marmoreal" and the XMPP hostname is "wonderland" then the JID is "marmoreal@wonderland".
                example: "marmoreal"
              owner:
                type: string
                format: JID
                description: The user's JID on whose behalf to create the room
                example: "alice@wonderland.lit"
              name:
                type: string
                description: |
                  The name of the room. **NOT** the room's JID.
                  This is the name that goes into the room's configuration.
                example: "Rabbit hole"
              subject:
                type: string
                description: Room's initial subject
                example: "Magic stuff"
      responses:
        201:
          description: Room was created
          schema:
            title: roomJID
            type: string
  /muc-lights/{XMPPHost}/{roomName}/participants:
    parameters:
      - $ref: '#/parameters/hostName'
      - $ref: '#/parameters/roomName'
    post:
      tags:
        - "MUC-light management"
      description: Invite one user on behalf of another.
      consumes:
        - application/json
      parameters:
        - name: invite
          in: body
          description: The invite itself
          required: true
          schema:
            title: invite
            type: object
            properties:
              sender:
                type: string
                format: JID
                description: The inviter's JID
                example: "alice@wonderland.lit"
              recipient:
                type: string
                format: JID
                description: The invitee's JID
                example: "rabbit@wonderland.lit"
      responses:
        204:
          description: An invite was sent out
  /muc-lights/{XMPPHost}/{roomName}/messages:
    parameters:
      - $ref: '#/parameters/hostName'
      - $ref: '#/parameters/roomName'
    post:
      tags:
        - "MUC-light management"
      description: Send a message to the MUC Light room on behalf of a user.
      consumes:
        - application/json
      parameters:
        - name: chatMessage
          in: body
          description: The message details
          required: true
          schema:
            title: chatMessage
            type: object
            properties:
              from:
                type: string
                format: JID
                description: The sender's JID. Message will be sent on their behalf
                example: "alice@wonderland.lit"
              body:
                type: string
                format: JID
                description: The message text
                example: "A test message"
      responses:
        204:
          description: Message was sent to the MUC Light room
  /muc-lights/{XMPPHost}/{roomName}/{user}/management:
    parameters:
      - $ref: '#/parameters/hostName'
      - $ref: '#/parameters/roomName'
      - user: owner
        in: path
        description: User's JID (f.e. alice@wonderland.lit)
        required: true
        type: string
        format: JID
    delete:
      tags:
        - "MUC-light management"
      description: Delete a MUC-light room.
      responses:
        204:
          description: The MUC-light room was deleted.
  /mucs/{XMPPHost}:
    parameters:
      - $ref: '#/parameters/hostName'
    post:
      tags:
        - "MUC management"
      description: Create a MUC room under the given XMPP hostname.
      consumes:
        - application/json
      parameters:
        - name: roomDetails
          in: body
          description: Details for the room to be created.
          required: true
          schema:
            title: roomDetails
            type: object
            properties:
              name:
                type: string
                example: "foo"
                description: A name for the room (the leading part of the JID)
              owner:
                type: string
                format: JID
                example: "alice@wonderland.lit"
              nick:
                type: string
                description: A nickname for the owner.
                example: "ali"
      responses:
        201:
          description: A room was created
  /mucs/{XMPPHost}/{roomName}/participants:
    parameters:
      - $ref: '#/parameters/hostName'
      - $ref: '#/parameters/roomName'
    post:
      tags:
        - "MUC management"
      description: Invite one user on behalf of another.
      consumes:
        - application/json
      parameters:
        - name: invite
          in: body
          description: The invite itself
          required: true
          schema:
            title: invite
            type: object
            properties:
              sender:
                type: string
                format: JID
                description: The inviter's JID
                example: "alice@wonderland.lit"
              recipient:
                type: string
                format: JID
                description: The invitee's JID
                example: "alice@wonderland.lit"
              reason:
                type: string
                description: Initial text sent along with the invite
      responses:
        204:
          description: An invite was sent out
  /mucs/{XMPPHost}/{roomName}/messages:
    parameters:
      - $ref: '#/parameters/hostName'
      - $ref: '#/parameters/roomName'
    post:
      tags:
        - "MUC management"
      description: Send message to the MUC room on behalf of a user.
      consumes:
        - application/json
      parameters:
        - name: chatMessage
          in: body
          description: The message details
          required: true
          schema:
            title: chatMessage
            type: object
            properties:
              from:
                type: string
                description: The sender's JID. Message will be sent on their behalf
                example: "alice@wonderland.lit"
              body:
                type: string
                description: The message text
                example: "Hello, it's alice"
      responses:
        204:
          description: Message was sent to the MUC room
  /mucs/{XMPPHost}/{roomName}/{nickname}:
    parameters:
      - $ref: '#/parameters/hostName'
      - $ref: '#/parameters/roomName'
      - name: nickname
        in: path
        description: The user's nickname for the given room
        required: true
        type: string
    delete:
      tags:
        - "MUC management"
      description: Kick a user out on behalf of one of the room's moderators.
      responses:
        204:
          description: User was kicked out from the MUC room.

parameters:
  hostName:
    name: XMPPHost
    in: path
    description: The XMPP host served by the server.
    required: true
    type: string
    format: hostname
  roomName:
    name: roomName
    in: path
    description: The MUC Light room's **name** (i.e. **not** the room's JID)
    required: true
    type: string

definitions:
  messageList:
    title: records
    type: array
    items:
      title: record
      type: object
      properties:
        sender:
          type: string
          format: JID
        timestamp:
          type: integer
        message_id:
          type: string
        body:
          type: string
  ContactDetails:
    properties:
      jid:
        type: string
        example: 'alice@wonderland.lit'
        description: The message recipient's bare JID.
      subscription:
        type: string
        description: |
          Subscription state of me vs contact; there are four possible state:
          * none
          * to - I receive updates about the contact's presence
          * from - the contact receives updates about my presence
          * both
        enum: ["none", "to", "from", "both"]
      ask:
        type: string
        description: |
          Tells whether one of us has asked the other for subscription to presence info and is waiting for approval.
          Possible states:
          * none
          * out - I asked the contact and am waiting for his approval
          * in - my contact asked me, it is up to me to decide
          * both
        enum: ["none", "in", "out", "both"]
